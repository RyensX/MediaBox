import java.lang.reflect.Field

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'AndResGuard'
}

try {
    apply from: secret
    apply from: andresguard
} catch (Exception ignored) {
}

android {
    compileSdkVersion build_versions.compile_sdk
    buildToolsVersion build_versions.build_tools

    defaultConfig {
        applicationId "com.su.mediabox"
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode version_code
        versionName version_name
        flavorDimensions "versionName"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        renderscriptTargetApi 19
        renderscriptSupportModeEnabled true

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

        ndk {
            abiFilters 'armeabi', 'arm64-v8a'
        }

        try {
            manifestPlaceholders = secret.manifestPlaceholders
        } catch (Exception ignored) {
            def tmpManifestPlaceholders = [:]
            tmpManifestPlaceholders.UMENG_APPKEY_VALUE = ""
            tmpManifestPlaceholders.UMENG_MESSAGE_SECRET = ""
            manifestPlaceholders = tmpManifestPlaceholders
        }

        resConfigs 'xxxhdpi', 'anydpi-v26'

    }

    signingConfigs {
        release {
            try {
                keyAlias secret.sign.RELEASE_KEY_ALIAS
                keyPassword secret.sign.RELEASE_KEY_PASSWORD
                storeFile file('../key.jks')
                storePassword secret.sign.RELEASE_STORE_PASSWORD
            } catch (Exception ignored) {
            }
        }
    }

    productFlavors {
        Github {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "Github"]
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            def buildType = variant.buildType.name.toString()
            if (buildType != "debug")
                outputFileName = "MediaBox_release_${variant.productFlavors[0].name.toLowerCase()}_${variant.versionName}_${variant.versionCode}.apk"
            else
                outputFileName = "app_debug.apk"
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false           // 使用keep.xml，keep住皮肤文件
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            applicationIdSuffix '.debug'    // 一台手机debug release共存
            ndk {
                abiFilters 'armeabi', 'x86', 'x86_64', 'arm64-v8a'
            }
        }
        release {
            signingConfig signingConfigs.release    //签名
            minifyEnabled true
            zipAlignEnabled true
            shrinkResources true       // 使用keep.xml，keep住皮肤文件
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            ndk {
                abiFilters 'armeabi', 'arm64-v8a'
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    packagingOptions {
        jniLibs {
            excludes += ['META-INF/nanohttpd/**', 'org/seamless/**', 'org/eclipse/jetty/**', 'org/fourthline/cling/**', 'com/badlogic/**']
        }
        resources {
            excludes += ['META-INF/beans.xml', 'META-INF/rxjava.properties', 'META-INF/README.md', 'META-INF/CHANGES', 'META-INF/LICENSE', 'META-INF/eclipse.inf', 'META-INF/DEPENDENCIES', 'META-INF/nanohttpd/**', 'about_files/LICENSE_CDDL.txt', 'DebugProbesKt.bin', 'jetty-dir.css', 'plugin.properties', 'org/seamless/**', 'org/eclipse/jetty/**', 'org/fourthline/cling/**', 'com/badlogic/**']
        }
    }


    buildFeatures {
        viewBinding true
    }
}

dependencies {

    implementation deps.kotlin.kotlin_stdlib
    implementation deps.kotlin.core_ktx
    implementation deps.support.appcompat
    implementation deps.support.material
    implementation deps.support.swiperefreshlayout
    implementation deps.support.constraintlayout
    implementation deps.jsoup.jsoup
    implementation deps.lifecycle.lifecycle_livedata_ktx
    implementation deps.lifecycle.lifecycle_viewmodel_ktx
    implementation deps.lifecycle.lifecycle_runtime_ktx
    implementation deps.lifecycle.lifecycle_activity_ktx
    implementation deps.lifecycle.lifecycle_fragment_ktx
    implementation deps.support.viewpager2
    implementation deps.support.viewpager2_indicator
    implementation deps.okhttp3.okhttp
    implementation deps.shuyu.GSYVideoPlayer
    implementation deps.retrofit2.retrofit
    implementation deps.retrofit2.converter_gson
    implementation deps.getActivity.XXPermissions
    implementation deps.kotlinx.kotlinx_coroutines_android
    implementation deps.material_dialogs.core
    implementation deps.material_dialogs.input
    implementation deps.room.room_runtime
    implementation deps.room.room_ktx
    implementation 'androidx.webkit:webkit:1.4.0'
    androidTestImplementation 'junit:junit:4.12'
    kapt deps.room.room_compiler
    implementation deps.filedownloader.library
    implementation deps.cling.cling_core
    implementation deps.cling.cling_support
    implementation deps.jetty.jetty_server
    implementation deps.jetty.jetty_servlet
    implementation deps.jetty.jetty_client
    implementation deps.nanohttpd.nanohttpd
    compileOnly files('libs/cdi-api.jar')
    // DLNACastService编译需要javax.enterprise.inject.Alternative类
//    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.4'
    implementation deps.umsdk.common
    implementation deps.umsdk.asms
    implementation deps.umsdk.apm
    implementation deps.umsdk.push
    implementation deps.smart.refresh_layout_kernel
    implementation deps.smart.refresh_header_material
    implementation deps.smart.refresh_footer_ball
    implementation deps.coil_kt.coil
    implementation deps.kuaishou.akdanmaku
    implementation deps.okhttp3.okhttp_dnsoverhttps
    implementation deps.jakewharton.disklrucache
    implementation deps.google.flexbox
    implementation deps.cretin.etv
    implementation deps.apache.commons_text
    implementation deps.settings.pref
    implementation deps.settings.data_store
    implementation project(':MediaBoxPluginApi')
    //debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.8.1'
    implementation deps.appAnalytics.analytics
    implementation deps.appAnalytics.crashes
}

try {
//AndResGuard资源混淆工具
    andResGuard {
        // 使用mappingFile，防止需要换肤的资源id被替换
        mappingFile = file("./resource_mapping.txt")
        //mappingFile = null
        use7zip = true
        useSign = true
        // 打开这个开关，会keep住所有资源的原始路径，只混淆资源的名字
        keepRoot = false
        // 设置这个值，会把arsc name列混淆成相同的名字，减少string常量池的大小
        fixedResName = "arg"
        // 打开这个开关会合并所有哈希值相同的资源，但请不要过度依赖这个功能去除去冗余资源
        mergeDuplicatedRes = true
        whiteList = andresguard.whiteList
        compressFilePattern = [
                "*.png",
                "*.jpg",
                "*.jpeg",
                "*.gif",
                "resources.arsc"
        ]
        sevenzip {
            artifact = 'com.tencent.mm:SevenZip:1.2.20'
            //path = "/usr/local/bin/7za"
        }

        /**
         * 可选： 如果不设置则会默认覆盖assemble输出的apk
         **/
        // finalApkBackupPath = "${project.rootDir}/final.apk"

        /**
         * 可选: 指定v1签名时生成jar文件的摘要算法
         * 默认值为“SHA-1”
         **/
        // digestalg = "SHA-256"
    }
} catch (Exception ignored) {
}